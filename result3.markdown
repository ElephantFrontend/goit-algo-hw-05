# Висновки щодо швидкості роботи алгоритмів

На основі виконаного коду можна зробити висновки про швидкість роботи алгоритмів **Boyer-Moore**, **Knuth-Morris-Pratt** та **Rabin-Karp** для пошуку підрядка у двох текстових файлах. Розглянемо результати окремо для кожного тексту, а також узагальнимо результати в цілому.

## Висновки щодо швидкості алгоритмів

### 1. Текст 1 з існуючим підрядком
- Алгоритм **Boyer-Moore** працює швидше за інші алгоритми, особливо у великих текстах, коли шуканий підрядок знаходиться ближче до кінця.
- **Knuth-Morris-Pratt** показує стабільні результати завдяки попередньому обчисленню таблиці відскоків, але в загальному випадку може бути дещо повільнішим за Boyer-Moore.
- **Rabin-Karp** демонструє порівнянно повільнішу швидкість на великих текстах через необхідність порівняння хешів та можливих колізій.

### 2. Текст 1 з вигаданим підрядком
- Алгоритм **Boyer-Moore** може працювати повільніше, оскільки йому потрібно перевірити значну частину тексту або весь текст, перш ніж переконатися, що підрядка немає.
- **Knuth-Morris-Pratt** тут показує стабільність через свій механізм обходу тексту і те, що алгоритм не потребує повернень на вже оброблені символи.
- **Rabin-Karp** зберігає свою стабільність, але може витратити більше часу при перевірці хеш-значень.

### 3. Текст 2 з існуючим підрядком
- **Boyer-Moore** знову демонструє найкращу швидкість, що робить його підходящим для пошуку в довших текстах.
- **Knuth-Morris-Pratt** стабільний і трохи повільніший, але зазвичай показує хороші результати на великих текстах завдяки використанню таблиці префіксів.
- **Rabin-Karp** підходить для пошуку коротких підрядків, особливо якщо є ризик колізій.

### 4. Текст 2 з вигаданим підрядком
- **Boyer-Moore** через необхідність пройти майже весь текст повільніше за KMP.
- **Knuth-Morris-Pratt** знову показує стабільну швидкість, яка є незалежною від місця розташування підрядка.
- **Rabin-Karp** залишається стабільним, хоча і дещо менш ефективним при великій кількості невідповідностей через хеші.

## Загальні висновки
- **Boyer-Moore** є найшвидшим для великих текстів з пошуком існуючих підрядків. Якщо підрядок не існує, Boyer-Moore може працювати повільніше, оскільки він повинен перевірити весь текст або більшу його частину.
- **Knuth-Morris-Pratt** стабільний і підходить для випадків, коли потрібно забезпечити швидкість пошуку незалежно від місця розташування підрядка. В цілому, цей алгоритм найстабільніший у результатах, хоч і може бути трохи повільнішим за Boyer-Moore.
- **Rabin-Karp** більше підходить для пошуку коротких підрядків у великих текстах або коли частота порівнянь не критична. Його стабільність може страждати через хеш-колізії, але він простий для реалізації.

Таким чином, якщо потрібно шукати короткі підрядки у великих текстах, найкращими будуть **Boyer-Moore** або **Knuth-Morris-Pratt**. **Rabin-Karp** більше підходить для специфічних сценаріїв, наприклад, коли текст складається з числових або кодових значень.
